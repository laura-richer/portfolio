---
import MainLayout from '@/layouts/MainLayout.astro';
import IconChevronLeft from '@/icons/IconChevronLeft.astro';
import IconChevronRight from '@/icons/IconChevronRight.astro';
import IconGithub from '@/icons/IconGithub.astro';
import Title from '@/atoms/Title.astro';
import InnerPageHeader from '@/components/InnerPageHeader.astro';

const { frontmatter } = Astro.props;
const { title, shortDescription, accentColor, stack, image, website, github, prevSlug, nextSlug } = frontmatter;

const metaData = {
  metaTitle: title,
  metaDescription: shortDescription
}

const getFilenameFromPath = path => /[^/]*$/.exec(path)[0];
const stackIcons = await Astro.glob('../icons/stack/*.astro');
const projectStackIcons = stack.map(stackItem => {
  return stackIcons.find(
    icon => getFilenameFromPath(icon.file) === `Icon${stackItem}.astro`
  );
});

const PrevNavItem = prevSlug ? 'a' : 'span';
const NextNavItem = nextSlug ? 'a' : 'span';
---

<MainLayout {metaData}>
  <div class={`project-page-layout project-page-layout--${accentColor}`}>
    <InnerPageHeader accentColor="purple" closeUrl="/#projects" ctaLink={website} />

    <div class="project-page-layout__nav">
      <PrevNavItem
        href={prevSlug && `/project/${prevSlug}`}
        class={`project-page-layout__nav-item ${!prevSlug && 'project-page-layout__nav-item--disabled'}`}
      >
        <IconChevronLeft />
      </PrevNavItem>


      <NextNavItem
        href={nextSlug && `/project/${nextSlug}`}
        class={`project-page-layout__nav-item ${!nextSlug && 'project-page-layout__nav-item--disabled'}`}
      >
        <IconChevronRight />
      </NextNavItem>
    </div>

    <article class="project-page-layout__body container animate-section">
      <div class="project-page-layout__title">
        <Title title={title} color={accentColor} />
      </div>

      <div class="project-page-layout__stack">
        {projectStackIcons.map((projectStackIcon) =>
          <span class="project-page-layout__stack-icon">
            <projectStackIcon.default />
          </span>
        )}
      </div>

      <section class="project-page-layout__content">
        <div class="markdown">
          <slot />

          {github &&
            <a class="project-page-layout__link" href={github} target="_blank" rel="noopener noreferrer">
              <span class="project-page-layout__link-icon"><IconGithub/></span>
              <span>{github}</span>
            </a>
          }
        </div>

        <img class="project-page-layout__image-el" src={image} alt={title} />
      </section>
    </article>
  </div>
</MainLayout>

<style lang="scss">
@import '../scss/resources/breakpoints';
@import '../scss/resources/hover';

.project-page-layout {
  $self: &;

  --project-page-padding: var(--spacer-s);

  @media screen and (min-width: $breakpoint-mobile) {
    --project-page-padding: var(--spacer-m);
  }

  position: relative;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background-color: var(--color-white);
  z-index: 999;

  &__nav {
    display: none;

    @media screen and (min-width: $breakpoint-desktop) {
      position: fixed;
      top: 50%;
      transform: translateY(-50%);
      display: flex;
      justify-content: space-between;
      width: 100%;
      padding: var(--project-page-padding);

      :global(svg) {
        width: 2rem;
        height: 2rem;
        cursor: pointer;
      }

      &-item {
        &--disabled {
          pointer-events: none;
          opacity: 0;
        }
      }
    }
  }

  &__body {
    display: flex;
    flex-direction: column;
    padding: var(--project-page-padding);
    gap: var(--spacer-s);

    @media screen and (min-width: $breakpoint-mobile) {
      padding-top: 0;
      gap: var(--spacer-m);
    }
  }

  &__title {
    display: block;
    text-align: center;
  }

  &__stack {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacer-s);

    &-icon {
      display: block;
      height: 5rem;

      :global(svg),
      :global(img) {
        width: auto;
        height: 100%
      }
    }
  }

  &__content {
    display: grid;
    gap: var(--spacer-m);

    @media screen and (min-width: $breakpoint-tablet) {
      grid-template-columns: 1fr 1fr;
      gap: var(--spacer-m);
    }
  }

  &__link {
    display: flex;
    align-items: center;

    color: currentColor;
    gap: var(--spacer-xs);
    transition: color var(--animation-speed) ease-in-out;

    :global(svg) {
      height: 100%;
      width: auto;
    }

    &-icon {
      height: 2rem;
    }
  }

  &--purple {
    #{$self}__link,
    #{$self}__nav :global(svg) {
      @include hover {
        color: var(--color-purple);
      }
    }
  }
}
</style>
