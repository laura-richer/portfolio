---
import { type IconType } from '@/utils/types';
import * as projects from '@/content/sections/projects.md';
import MainLayout from '@/layouts/MainLayout/MainLayout.astro';
import IconChevronLeft from '@/icons/IconChevronLeft.astro';
import IconChevronRight from '@/icons/IconChevronRight.astro';
import IconGithub from '@/icons/IconGithub.astro';
import IconWeb from '@/icons/IconWeb.astro';
import Title from '@/atoms/Title.astro';
import InnerPageHeader from '@/components/InnerPageHeader.astro';

const { frontmatter } = Astro.props;
const { title, shortDescription, stack, image, website, github, prevSlug, nextSlug } = frontmatter;
const { accentColor } = projects.frontmatter;

const metaData = {
  metaTitle: title,
  metaDescription: shortDescription,
};

const getFilenameFromPath = (path: string) => /[^/]*$/.exec(path)[0];
const stackIcons: IconType[] = await Astro.glob('../icons/stack/*.astro');
const projectStackIcons: IconType[] = stack.map((stackItem: string) => {
  return stackIcons.find(icon => getFilenameFromPath(icon.file) === `Icon${stackItem}.astro`);
});

const PrevNavItem = prevSlug ? 'a' : 'span';
const NextNavItem = nextSlug ? 'a' : 'span';
---

<MainLayout {metaData}>
  <div class={`project-page-layout project-page-layout--${accentColor}`}>
    <InnerPageHeader accentColor="purple" closeUrl="/#projects" ctaLink={website} />

    <div class="project-page-layout__nav">
      <PrevNavItem
        href={prevSlug && `/project/${prevSlug}`}
        class={`project-page-layout__nav-item ${!prevSlug && 'project-page-layout__nav-item--disabled'}`}
      >
        <IconChevronLeft />
      </PrevNavItem>

      <NextNavItem
        href={nextSlug && `/project/${nextSlug}`}
        class={`project-page-layout__nav-item ${!nextSlug && 'project-page-layout__nav-item--disabled'}`}
      >
        <IconChevronRight />
      </NextNavItem>
    </div>

    <section class="project-page-layout__body container animate-section">
      <div class="project-page-layout__title">
        <Title title={title} color={accentColor} />
      </div>

      <div class="project-page-layout__stack">
        {
          projectStackIcons.map((projectStackIcon: IconType) => (
            <span class="project-page-layout__stack-icon">
              <projectStackIcon.default />
            </span>
          ))
        }
      </div>

      <section class="project-page-layout__content-wrapper">
        <div class="project-page-layout__content">
          <article class="markdown">
            <slot />
          </article>

          <div class="project-page-layout__link-list">
            {
              website && (
                <a
                  class="project-page-layout__link"
                  href={website}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <span class="project-page-layout__link-icon">
                    <IconWeb />
                  </span>
                  <span>{website}</span>
                </a>
              )
            }
            {
              github && (
                <a
                  class="project-page-layout__link"
                  href={github}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <span class="project-page-layout__link-icon">
                    <IconGithub />
                  </span>
                  <span>{github}</span>
                </a>
              )
            }
          </div>
        </div>

        <img class="project-page-layout__image-el" src={image} alt={title} />
      </section>
    </section>
  </div>
</MainLayout>

<style lang="scss">
  @import '@/scss/resources/breakpoints';
  @import '@/scss/resources/hover';

  .project-page-layout {
    $self: &;

    --project-page-padding: var(--spacer-s);

    @media screen and (min-width: $breakpoint-mobile) {
      --project-page-padding: var(--spacer-m);
    }

    position: relative;
    z-index: 999;
    display: flex;
    min-height: 100vh;
    flex-direction: column;
    background-color: var(--color-white);

    &__nav {
      display: none;

      @media screen and (min-width: $breakpoint-desktop) {
        position: fixed;
        top: 50%;
        display: flex;
        width: 100%;
        justify-content: space-between;
        padding: var(--project-page-padding);
        transform: translateY(-50%);

        :global(svg) {
          width: 2rem;
          height: 2rem;
          cursor: pointer;
        }

        &-item {
          &--disabled {
            opacity: 0;
            pointer-events: none;
          }
        }
      }
    }

    &__body {
      display: flex;
      flex-direction: column;
      padding: var(--project-page-padding);
      gap: var(--spacer-s);

      @media screen and (min-width: $breakpoint-mobile) {
        padding-top: 0;
        gap: var(--spacer-m);
      }
    }

    &__title {
      display: block;
      text-align: center;
    }

    &__stack {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--spacer-s);

      &-icon {
        display: block;
        height: 4rem;

        :global(svg),
        :global(img) {
          width: auto;
          height: 100%;
        }
      }
    }

    &__content-wrapper {
      display: grid;
      gap: var(--spacer-m);

      @media screen and (min-width: $breakpoint-tablet) {
        gap: var(--spacer-m);
        grid-template-columns: 1fr 1fr;
      }
    }

    &__content {
      display: flex;
      flex-direction: column;
      gap: var(--spacer-s);
    }

    &__link-list {
      display: flex;
      flex-direction: column;
      gap: var(--spacer-xs);
    }

    &__link {
      display: flex;
      align-items: center;
      color: currentcolor;
      gap: var(--spacer-xs);
      transition: color var(--animation-speed) ease-in-out;

      :global(svg) {
        width: auto;
        height: 100%;
      }

      &-icon {
        height: 2rem;
      }
    }

    &--purple {
      #{$self}__link,
      #{$self}__nav :global(svg) {
        @include hover {
          color: var(--color-purple);
        }
      }
    }
  }
</style>
